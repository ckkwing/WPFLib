<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
    xmlns:media="clr-namespace:System.Windows.Media;assembly=PresentationCore"
    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
    xmlns:converters="clr-namespace:Theme.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../ThemeCommonDefine.xaml" />
        <ResourceDictionary Source="Brushs.xaml" />
        <ResourceDictionary Source="Images.xaml" />
        <ResourceDictionary Source="ButtonStyles.xaml" />
        <ResourceDictionary Source="NumericUpDownStyles.xaml" />
        <ResourceDictionary Source="PasswordBoxStyle.xaml" />
        <ResourceDictionary Source="ComboBoxStyles.xaml" />
        <ResourceDictionary Source="BaseWindowStyle.xaml" />
        <ResourceDictionary Source="WindowChromeStyle.xaml" />
        <ResourceDictionary Source="../CircularStyles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--#region TextBlock-->
    <Style  TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Control.FontSize" Value="{DynamicResource FONTSIZE_TITLE_H6}" />
        <Setter Property="Control.SnapsToDevicePixels" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource BRUSH_WHITE}" />
    </Style>

    <Style x:Key="StyleTextTitleH1" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="{DynamicResource FONTSIZE_TITLE_H1}" />
    </Style>

    <Style x:Key="StyleTextTitleH2" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="{DynamicResource FONTSIZE_TITLE_H2}" />
    </Style>

    <Style x:Key="StyleTextMainbody1" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="{DynamicResource FONTSIZE_MAINBODY_1}" />
    </Style>

    <Style x:Key="StyleTextMainbody2" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="{DynamicResource FONTSIZE_MAINBODY_2}" />
    </Style>

    <Style x:Key="StyleTextUnderlined" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="{DynamicResource FONTSIZE_UNDERLINED}" />
    </Style>
    <!--#endregion-->

    
    <!--#region RadioButton-->
    <Style x:Key="RectangleRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BRUSH_BORDER_NORMAL}" />
        <Setter Property="Background" Value="{DynamicResource BRUSH_BLACK}" />
        <Setter Property="MinWidth" Value="140" />
        <Setter Property="MinHeight" Value="140" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="border" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" SnapsToDevicePixels="True" CornerRadius="10">
                        <TextBlock x:Name="txtContent" Style="{StaticResource StyleTextTitleH2}" Text="{TemplateBinding Content}" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontWeight="{TemplateBinding FontWeight}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource OPACITY_DISABLED}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderThickness" Value="1" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource BRUSH_BORDER_HOVER}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BRUSH_BACKGROUND_HOVER}" />
                            <Setter TargetName="txtContent" Property="TextBlock.Foreground" Value="{DynamicResource BRUSH_TEXT_HOVER}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="BorderThickness" Value="1" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource BRUSH_BORDER_PRESSED}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BRUSH_BACKGROUND_PRESSED}" />
                            <Setter TargetName="txtContent" Property="TextBlock.Foreground" Value="{DynamicResource BRUSH_TEXT_PRESSED}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="BorderThickness" Value="1" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource BRUSH_BORDER_PRESSED}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BRUSH_BACKGROUND_PRESSED}" />
                            <Setter TargetName="txtContent" Property="TextBlock.Foreground" Value="{DynamicResource BRUSH_TEXT_PRESSED}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    

    <!--<Style x:Key="GenericMenuItemStyle" TargetType="MenuItem" >
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource MenuItemTopLevelCommonTemplate}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource MenuItemTopLevelCommonTemplate}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource MenuItemSubmenuCommonTemplate}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource MenuItemSubmenuCommonTemplate}"/>
            </Trigger>
            --><!-- VD: Make it a multitrigger as soon as a different colour is needed for top level items! --><!--
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledTextBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <Style TargetType="MenuItem"><!--BasedOn="{StaticResource GenericMenuItemStyle}"-->
        <Style.Resources>
            <Style TargetType="Border" x:Key="MenuItemHighlightedBorder">
                <Setter Property="Background" Value="#FF454545"/>
            </Style>
        </Style.Resources>
    </Style>
    
    <Style TargetType="MenuItem" x:Key="HeaderMenuItemStyle" BasedOn="{StaticResource MenuItemStyle}">
        <Setter Property="MinWidth" Value="90"/>
    </Style>

    <Style TargetType="Menu">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Menu">
                    <Grid>
                        <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
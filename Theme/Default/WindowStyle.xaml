<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:customControl="clr-namespace:Theme.CustomControl"
                    xmlns:converter="clr-namespace:Theme.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Resource_Images.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    <converter:WidthAndHeightToRectConverter x:Key="WidthAndHeightToRectConverter" />
    <converter:ObjectToVisibilityConverter x:Key="ObjectToVisibilityConverter" />

    <ControlTemplate x:Key="CommonBaseWindowControlTemplate"  TargetType="{x:Type Window}">
        <Grid Margin="8" Background="Transparent">
            <Rectangle Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                               RadiusX="8" RadiusY="8">
                <Rectangle.Effect>
                    <DropShadowEffect BlurRadius="10" ShadowDepth="0" Color="#828282"/>
                </Rectangle.Effect>
            </Rectangle>
            <Border BorderBrush="{TemplateBinding BorderBrush}"  
                            BorderThickness="0"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  
                            CornerRadius="8">
                <Border.Clip>
                    <RectangleGeometry 
                        RadiusX="{Binding CornerRadius.TopLeft, RelativeSource={RelativeSource AncestorType={x:Type Border}}}" 
                        RadiusY="{Binding RadiusX, RelativeSource={RelativeSource Self}}">
                        <RectangleGeometry.Rect>
                            <MultiBinding Converter="{StaticResource WidthAndHeightToRectConverter}">
                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType={x:Type Border}}" />
                                <Binding Path="ActualHeight" RelativeSource="{RelativeSource AncestorType={x:Type Border}}" />
                            </MultiBinding>
                        </RectangleGeometry.Rect>
                    </RectangleGeometry>
                </Border.Clip>
                <Grid Background="Transparent">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions> 
                    <Border x:Name="topborder" Grid.Row="0" Height="20" 
                            Background="{Binding TitlebarBackgroundBrush, RelativeSource={RelativeSource TemplatedParent}}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Image Grid.Column="0" Margin="10,0,0,0" Stretch="None"
                                   Source="{TemplateBinding Icon}"
                                   Visibility="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToVisibilityConverter}}"/>
                            <customControl:EnhancedTextBlock  Grid.Column="1" Text="{TemplateBinding Title}" FontWeight="Bold" FontSize="12" Foreground="#ffffff" Margin="10,0,0,0" />
                            <StackPanel Grid.Column="2" Visibility="Hidden" /> <!--Space holder-->
                            <customControl:ImageButton x:Name="btnMinimize" Grid.Column="3" Image="{DynamicResource IMG_MINIMIZE}" ImageWidth="12" ImageHeight="2"
                                          ImageOver="{DynamicResource IMG_MINIMIZE}" ImagePressed="{DynamicResource IMG_MINIMIZE}"
                                          Command="{Binding MinimizeWindowCommand, RelativeSource={RelativeSource TemplatedParent}}" IsCancel="True" 
                                          Visibility="{Binding Path=CanMinimize, RelativeSource={RelativeSource TemplatedParent}}"
                                          VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,12,0"/>
                            <customControl:ImageButton x:Name="btnClose" Grid.Column="4" Image="{DynamicResource IMG_CLOSE}" ImageWidth="10" ImageHeight="10"
                                          ImageOver="{DynamicResource IMG_CLOSE}" ImagePressed="{DynamicResource IMG_CLOSE}"
                                          Command="{Binding CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}" IsCancel="True"
                                          Visibility="{Binding Path=CanClose, RelativeSource={RelativeSource TemplatedParent}}" 
                                          VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,12,0" />
                        </Grid>
                            </Border>
                            <ContentPresenter Grid.Row="1" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>

    <Style x:Key="CommonBaseWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource NullFocusVisualStyle}" />
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="AllowsTransparency" Value="true"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Template" Value="{StaticResource CommonBaseWindowControlTemplate}"/>
        <Style.Triggers>
            <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                <Setter Property="Template" Value="{StaticResource WindowTemplateKey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>